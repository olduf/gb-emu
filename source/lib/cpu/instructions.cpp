#include "lib/cpu/instructions.hpp"

namespace gb_lib {

Instruction* instructions[2][256] = {
    {
        InstructionBuilder(0x00, 4, 1, std::string("NOP")).build(),
        InstructionBuilder(0x01, 12, 3, std::string("LD BC,nn")).load(&InstructionArgument::NN).store(&InstructionArgument::BC).build(),
        InstructionBuilder(0x02, 8, 1, std::string("LD (BC),A")).load(&InstructionArgument::A).store(&InstructionArgument::_BC).build(),
        InstructionBuilder(0x03, 8, 1, std::string("INC BC")).load(&InstructionArgument::BC).increment(AffectFlagsType::U16).store(&InstructionArgument::BC).build(),
        InstructionBuilder(0x04, 4, 1, std::string("INC B")).load(&InstructionArgument::B).increment(AffectFlagsType::U8).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x05, 4, 1, std::string("DEC B")).load(&InstructionArgument::B).decrement(AffectFlagsType::U8).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x06, 8, 2, std::string("LD B,n")).load(&InstructionArgument::N).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x07, 4, 1, std::string("RLC A")).load(&InstructionArgument::A).rotateLeftAndCarry().store(&InstructionArgument::A).setFlagZero(false).build(),
        InstructionBuilder(0x08, 20, 3, std::string("LD (nn),SP")).loadSPToNN().build(),
        InstructionBuilder(0x09, 8, 1, std::string("ADD HL,BC")).load(&InstructionArgument::HL).add(&InstructionArgument::BC, AffectFlagsType::U16).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x0A, 8, 1, std::string("LD A,(BC)")).load(&InstructionArgument::_BC).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x0B, 8, 1, std::string("DEC BC")).load(&InstructionArgument::BC).decrement(AffectFlagsType::U16).store(&InstructionArgument::BC).build(),
        InstructionBuilder(0x0C, 4, 1, std::string("INC C")).load(&InstructionArgument::C).increment(AffectFlagsType::U8).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x0D, 4, 1, std::string("DEC C")).load(&InstructionArgument::C).decrement(AffectFlagsType::U8).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x0E, 8, 2, std::string("LD C,n")).load(&InstructionArgument::N).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x0F, 4, 1, std::string("RRC A")).load(&InstructionArgument::A).rotateRightAndCarry().store(&InstructionArgument::A).setFlagZero(false).build(),

        InstructionBuilder(0x10, 4, 1, std::string("STOP")).build(),
        InstructionBuilder(0x11, 12, 3, std::string("LD DE,nn")).load(&InstructionArgument::NN).store(&InstructionArgument::DE).build(),
        InstructionBuilder(0x12, 8, 1, std::string("LD (DE),A")).load(&InstructionArgument::A).store(&InstructionArgument::_DE).build(),
        InstructionBuilder(0x13, 8, 1, std::string("INC DE")).load(&InstructionArgument::DE).increment(AffectFlagsType::U16).store(&InstructionArgument::DE).build(),
        InstructionBuilder(0x14, 4, 1, std::string("INC D")).load(&InstructionArgument::D).increment(AffectFlagsType::U8).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x15, 4, 1, std::string("DEC D")).load(&InstructionArgument::D).decrement(AffectFlagsType::U8).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x16, 8, 2, std::string("LD D,n")).load(&InstructionArgument::N).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x17, 4, 1, std::string("RL A")).load(&InstructionArgument::A).rotateLeft().store(&InstructionArgument::A).setFlagZero(false).build(),
        InstructionBuilder(0x18, 12, 2, std::string("JR n")).load(&InstructionArgument::PC).add(&InstructionArgument::N, AffectFlagsType::S8).store(&InstructionArgument::PC).jump().build(),
        InstructionBuilder(0x19, 8, 1, std::string("ADD HL,DE")).load(&InstructionArgument::HL).add(&InstructionArgument::DE, AffectFlagsType::U16).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x1A, 8, 1, std::string("LD A,(DE)")).load(&InstructionArgument::_DE).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x1B, 8, 1, std::string("DEC DE")).load(&InstructionArgument::DE).decrement(AffectFlagsType::U16).store(&InstructionArgument::DE).build(),
        InstructionBuilder(0x1C, 4, 1, std::string("INC E")).load(&InstructionArgument::E).increment(AffectFlagsType::U8).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x1D, 4, 1, std::string("DEC E")).load(&InstructionArgument::E).decrement(AffectFlagsType::U8).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x1E, 8, 2, std::string("LD E,n")).load(&InstructionArgument::N).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x1F, 4, 1, std::string("RR A")).load(&InstructionArgument::A).rotateRight().store(&InstructionArgument::A).setFlagZero(false).build(),

        InstructionBuilder(0x20, 12, 2, std::string("JR NZ,n")).proceedIf(FlagCondition::NOT_ZERO, 8).load(&InstructionArgument::PC).add(&InstructionArgument::N, AffectFlagsType::S8).store(&InstructionArgument::PC).jump().build(),
        InstructionBuilder(0x21, 12, 3, std::string("LD HL,nn")).load(&InstructionArgument::NN).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x22, 8, 1, std::string("LD (HL+),A")).load(&InstructionArgument::A).store(&InstructionArgument::_HL).load(&InstructionArgument::HL).increment(AffectFlagsType::NONE).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x23, 8, 1, std::string("INC HL")).load(&InstructionArgument::HL).increment(AffectFlagsType::U16).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x24, 4, 1, std::string("INC H")).load(&InstructionArgument::H).increment(AffectFlagsType::U8).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x25, 4, 1, std::string("DEC H")).load(&InstructionArgument::B).decrement(AffectFlagsType::U8).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x26, 8, 2, std::string("LD H,n")).load(&InstructionArgument::N).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x27, 4, 1, std::string("DAA")).load(&InstructionArgument::A).decimalAdjust().store(&InstructionArgument::A).build(),
        InstructionBuilder(0x28, 12, 2, std::string("JR Z,n")).proceedIf(FlagCondition::ZERO, 8).load(&InstructionArgument::PC).add(&InstructionArgument::N, AffectFlagsType::S8).store(&InstructionArgument::PC).jump().build(),
        InstructionBuilder(0x29, 8, 1, std::string("ADD HL,HL")).load(&InstructionArgument::HL).add(&InstructionArgument::HL, AffectFlagsType::U16).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x2A, 8, 1, std::string("LD A,(HL+)")).load(&InstructionArgument::_HL).store(&InstructionArgument::A).load(&InstructionArgument::HL).increment(AffectFlagsType::NONE).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x2B, 8, 1, std::string("DEC HL")).load(&InstructionArgument::HL).decrement(AffectFlagsType::U16).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x2C, 4, 1, std::string("INC L")).load(&InstructionArgument::L).increment(AffectFlagsType::U8).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x2D, 4, 1, std::string("DEC L")).load(&InstructionArgument::L).increment(AffectFlagsType::U8).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x2E, 8, 2, std::string("LD L,n")).load(&InstructionArgument::N).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x2F, 4, 1, std::string("CPL")).load(&InstructionArgument::A).complement().store(&InstructionArgument::A).build(),

        InstructionBuilder(0x30, 12, 2, std::string("JR NC,n")).proceedIf(FlagCondition::NOT_CARRY, 8).load(&InstructionArgument::PC).add(&InstructionArgument::N, AffectFlagsType::S8).store(&InstructionArgument::PC).jump().build(),
        InstructionBuilder(0x31, 12, 3, std::string("LD SP,nn")).load(&InstructionArgument::NN).store(&InstructionArgument::SP).build(),
        InstructionBuilder(0x32, 8, 1, std::string("LD (HL-),A")).load(&InstructionArgument::A).store(&InstructionArgument::_HL).load(&InstructionArgument::HL).decrement(AffectFlagsType::NONE).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x33, 8, 1, std::string("INC SP")).load(&InstructionArgument::SP).increment(AffectFlagsType::U16).store(&InstructionArgument::SP).build(),
        InstructionBuilder(0x34, 12, 1, std::string("INC (HL)")).load(&InstructionArgument::_HL).increment(AffectFlagsType::U8).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x35, 12, 1, std::string("DEC (HL)")).load(&InstructionArgument::_HL).decrement(AffectFlagsType::U8).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x36, 12, 2, std::string("LD (HL),n")).load(&InstructionArgument::N).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x37, 4, 1, std::string("SCF")).load(&InstructionArgument::A).setCarryFlag().store(&InstructionArgument::A).build(),
        InstructionBuilder(0x38, 12, 2, std::string("JR C,n")).proceedIf(FlagCondition::CARRY, 8).load(&InstructionArgument::PC).add(&InstructionArgument::N, AffectFlagsType::S8).store(&InstructionArgument::PC).jump().build(),
        InstructionBuilder(0x39, 8, 1, std::string("ADD HL,SP")).load(&InstructionArgument::HL).add(&InstructionArgument::SP, AffectFlagsType::U16).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x3A, 8, 1, std::string("LD A,(HL-)")).load(&InstructionArgument::_HL).store(&InstructionArgument::A).load(&InstructionArgument::HL).decrement(AffectFlagsType::NONE).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0x3B, 8, 1, std::string("DEC SP")).load(&InstructionArgument::SP).decrement(AffectFlagsType::U16).store(&InstructionArgument::SP).build(),
        InstructionBuilder(0x3C, 4, 1, std::string("INC A")).load(&InstructionArgument::A).increment(AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x3D, 4, 1, std::string("DEC A")).load(&InstructionArgument::A).decrement(AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x3E, 8, 2, std::string("LD A,n")).load(&InstructionArgument::N).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x3F, 4, 1, std::string("CCF")).load(&InstructionArgument::A).complementCarryFlag().store(&InstructionArgument::A).build(),

        InstructionBuilder(0x40, 4, 1, std::string("LD B,B")).load(&InstructionArgument::B).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x41, 4, 1, std::string("LD B,C")).load(&InstructionArgument::C).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x42, 4, 1, std::string("LD B,D")).load(&InstructionArgument::D).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x43, 4, 1, std::string("LD B,E")).load(&InstructionArgument::E).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x44, 4, 1, std::string("LD B,H")).load(&InstructionArgument::H).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x45, 4, 1, std::string("LD B,L")).load(&InstructionArgument::L).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x46, 8, 1, std::string("LD B,(HL)")).load(&InstructionArgument::_HL).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x47, 4, 1, std::string("LD B,A")).load(&InstructionArgument::A).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x48, 4, 1, std::string("LD C,B")).load(&InstructionArgument::B).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x49, 4, 1, std::string("LD C,C")).load(&InstructionArgument::C).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x4A, 4, 1, std::string("LD C,D")).load(&InstructionArgument::D).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x4B, 4, 1, std::string("LD C,E")).load(&InstructionArgument::E).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x4C, 4, 1, std::string("LD C,H")).load(&InstructionArgument::H).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x4D, 4, 1, std::string("LD C,L")).load(&InstructionArgument::L).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x4E, 8, 1, std::string("LD C,(HL)")).load(&InstructionArgument::_HL).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x4F, 4, 1, std::string("LD C,A")).load(&InstructionArgument::A).store(&InstructionArgument::C).build(),

        InstructionBuilder(0x50, 4, 1, std::string("LD D,B")).load(&InstructionArgument::B).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x51, 4, 1, std::string("LD D,C")).load(&InstructionArgument::C).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x52, 4, 1, std::string("LD D,D")).load(&InstructionArgument::D).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x53, 4, 1, std::string("LD D,E")).load(&InstructionArgument::E).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x54, 4, 1, std::string("LD D,H")).load(&InstructionArgument::H).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x55, 4, 1, std::string("LD D,L")).load(&InstructionArgument::L).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x56, 8, 1, std::string("LD D,(HL)")).load(&InstructionArgument::_HL).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x57, 4, 1, std::string("LD D,A")).load(&InstructionArgument::A).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x58, 4, 1, std::string("LD E,B")).load(&InstructionArgument::B).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x59, 4, 1, std::string("LD E,C")).load(&InstructionArgument::C).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x5A, 4, 1, std::string("LD E,D")).load(&InstructionArgument::D).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x5B, 4, 1, std::string("LD E,E")).load(&InstructionArgument::E).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x5C, 4, 1, std::string("LD E,H")).load(&InstructionArgument::H).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x5D, 4, 1, std::string("LD E,L")).load(&InstructionArgument::L).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x5E, 8, 1, std::string("LD E,(HL)")).load(&InstructionArgument::_HL).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x5F, 4, 1, std::string("LD E,A")).load(&InstructionArgument::A).store(&InstructionArgument::E).build(),

        InstructionBuilder(0x60, 4, 1, std::string("LD H,B")).load(&InstructionArgument::B).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x61, 4, 1, std::string("LD H,C")).load(&InstructionArgument::C).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x62, 4, 1, std::string("LD H,D")).load(&InstructionArgument::D).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x63, 4, 1, std::string("LD H,E")).load(&InstructionArgument::E).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x64, 4, 1, std::string("LD H,H")).load(&InstructionArgument::H).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x65, 4, 1, std::string("LD H,L")).load(&InstructionArgument::L).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x66, 8, 1, std::string("LD H,(HL)")).load(&InstructionArgument::_HL).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x67, 4, 1, std::string("LD H,A")).load(&InstructionArgument::A).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x68, 4, 1, std::string("LD L,B")).load(&InstructionArgument::B).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x69, 4, 1, std::string("LD L,C")).load(&InstructionArgument::C).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x6A, 4, 1, std::string("LD L,D")).load(&InstructionArgument::D).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x6B, 4, 1, std::string("LD L,E")).load(&InstructionArgument::E).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x6C, 4, 1, std::string("LD L,H")).load(&InstructionArgument::H).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x6D, 4, 1, std::string("LD L,L")).load(&InstructionArgument::L).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x6E, 8, 1, std::string("LD L,(HL)")).load(&InstructionArgument::_HL).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x6F, 4, 1, std::string("LD L,A")).load(&InstructionArgument::A).store(&InstructionArgument::L).build(),

        InstructionBuilder(0x70, 8, 1, std::string("LD (HL),B")).load(&InstructionArgument::B).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x71, 8, 1, std::string("LD (HL),C")).load(&InstructionArgument::C).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x72, 8, 1, std::string("LD (HL),D")).load(&InstructionArgument::D).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x73, 8, 1, std::string("LD (HL),E")).load(&InstructionArgument::E).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x74, 8, 1, std::string("LD (HL),H")).load(&InstructionArgument::H).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x75, 8, 1, std::string("LD (HL),L")).load(&InstructionArgument::L).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x76, 4, 1, std::string("HALT")).build(),
        InstructionBuilder(0x77, 8, 1, std::string("LD (HL),A")).load(&InstructionArgument::A).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x78, 4, 1, std::string("LD A,B")).load(&InstructionArgument::B).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x79, 4, 1, std::string("LD A,C")).load(&InstructionArgument::C).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x7A, 4, 1, std::string("LD A,D")).load(&InstructionArgument::D).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x7B, 4, 1, std::string("LD A,E")).load(&InstructionArgument::E).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x7C, 4, 1, std::string("LD A,H")).load(&InstructionArgument::H).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x7D, 4, 1, std::string("LD A,L")).load(&InstructionArgument::L).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x7E, 8, 1, std::string("LD A,(HL)")).load(&InstructionArgument::_HL).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x7F, 4, 1, std::string("LD A,A")).load(&InstructionArgument::A).store(&InstructionArgument::A).build(),

        InstructionBuilder(0x80, 4, 1, std::string("ADD A,B")).load(&InstructionArgument::A).add(&InstructionArgument::B, AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x81, 4, 1, std::string("ADD A,C")).load(&InstructionArgument::A).add(&InstructionArgument::C, AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x82, 4, 1, std::string("ADD A,D")).load(&InstructionArgument::A).add(&InstructionArgument::D, AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x83, 4, 1, std::string("ADD A,E")).load(&InstructionArgument::A).add(&InstructionArgument::E, AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x84, 4, 1, std::string("ADD A,H")).load(&InstructionArgument::A).add(&InstructionArgument::H, AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x85, 4, 1, std::string("ADD A,L")).load(&InstructionArgument::A).add(&InstructionArgument::L, AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x86, 8, 1, std::string("ADD A,(HL)")).load(&InstructionArgument::A).add(&InstructionArgument::_HL, AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x87, 4, 1, std::string("ADD A,A")).load(&InstructionArgument::A).add(&InstructionArgument::A, AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x88, 4, 1, std::string("ADC A,B")).load(&InstructionArgument::A).addWithCarry(&InstructionArgument::B).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x89, 4, 1, std::string("ADC A,C")).load(&InstructionArgument::A).addWithCarry(&InstructionArgument::C).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x8A, 4, 1, std::string("ADC A,D")).load(&InstructionArgument::A).addWithCarry(&InstructionArgument::D).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x8B, 4, 1, std::string("ADC A,E")).load(&InstructionArgument::A).addWithCarry(&InstructionArgument::E).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x8C, 4, 1, std::string("ADC A,H")).load(&InstructionArgument::A).addWithCarry(&InstructionArgument::H).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x8D, 4, 1, std::string("ADC A,L")).load(&InstructionArgument::A).addWithCarry(&InstructionArgument::L).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x8E, 8, 1, std::string("ADC A,(HL)")).load(&InstructionArgument::A).addWithCarry(&InstructionArgument::_HL).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x8F, 4, 1, std::string("ADC A,A")).load(&InstructionArgument::A).addWithCarry(&InstructionArgument::A).store(&InstructionArgument::A).build(),

        InstructionBuilder(0x90, 4, 1, std::string("SUB A,B")).load(&InstructionArgument::A).subtract(&InstructionArgument::B).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x91, 4, 1, std::string("SUB A,C")).load(&InstructionArgument::A).subtract(&InstructionArgument::C).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x92, 4, 1, std::string("SUB A,D")).load(&InstructionArgument::A).subtract(&InstructionArgument::D).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x93, 4, 1, std::string("SUB A,E")).load(&InstructionArgument::A).subtract(&InstructionArgument::E).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x94, 4, 1, std::string("SUB A,H")).load(&InstructionArgument::A).subtract(&InstructionArgument::H).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x95, 4, 1, std::string("SUB A,L")).load(&InstructionArgument::A).subtract(&InstructionArgument::L).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x96, 8, 1, std::string("SUB A,(HL)")).load(&InstructionArgument::A).subtract(&InstructionArgument::_HL).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x97, 4, 1, std::string("SUB A,A")).load(&InstructionArgument::A).subtract(&InstructionArgument::A).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x98, 4, 1, std::string("SBC A,B")).load(&InstructionArgument::A).subtractWithCarry(&InstructionArgument::B).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x99, 4, 1, std::string("SBC A,C")).load(&InstructionArgument::A).subtractWithCarry(&InstructionArgument::C).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x9A, 4, 1, std::string("SBC A,D")).load(&InstructionArgument::A).subtractWithCarry(&InstructionArgument::D).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x9B, 4, 1, std::string("SBC A,E")).load(&InstructionArgument::A).subtractWithCarry(&InstructionArgument::E).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x9C, 4, 1, std::string("SBC A,H")).load(&InstructionArgument::A).subtractWithCarry(&InstructionArgument::H).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x9D, 4, 1, std::string("SBC A,L")).load(&InstructionArgument::A).subtractWithCarry(&InstructionArgument::L).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x9E, 8, 1, std::string("SBC A,(HL)")).load(&InstructionArgument::A).subtractWithCarry(&InstructionArgument::_HL).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x9F, 4, 1, std::string("SBC A,A")).load(&InstructionArgument::A).subtractWithCarry(&InstructionArgument::A).store(&InstructionArgument::A).build(),

        InstructionBuilder(0xA0, 4, 1, std::string("AND A,B")).load(&InstructionArgument::A).andBytes(&InstructionArgument::B).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA1, 4, 1, std::string("AND A,C")).load(&InstructionArgument::A).andBytes(&InstructionArgument::C).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA2, 4, 1, std::string("AND A,D")).load(&InstructionArgument::A).andBytes(&InstructionArgument::D).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA3, 4, 1, std::string("AND A,E")).load(&InstructionArgument::A).andBytes(&InstructionArgument::E).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA4, 4, 1, std::string("AND A,H")).load(&InstructionArgument::A).andBytes(&InstructionArgument::H).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA5, 4, 1, std::string("AND A,L")).load(&InstructionArgument::A).andBytes(&InstructionArgument::L).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA6, 8, 1, std::string("AND A,(HL)")).load(&InstructionArgument::A).andBytes(&InstructionArgument::_HL).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA7, 4, 1, std::string("AND A,A")).load(&InstructionArgument::A).andBytes(&InstructionArgument::A).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA8, 4, 1, std::string("XOR A,B")).load(&InstructionArgument::A).xorBytes(&InstructionArgument::B).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA9, 4, 1, std::string("XOR A,C")).load(&InstructionArgument::A).xorBytes(&InstructionArgument::C).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xAA, 4, 1, std::string("XOR A,D")).load(&InstructionArgument::A).xorBytes(&InstructionArgument::D).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xAB, 4, 1, std::string("XOR A,E")).load(&InstructionArgument::A).xorBytes(&InstructionArgument::E).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xAC, 4, 1, std::string("XOR A,H")).load(&InstructionArgument::A).xorBytes(&InstructionArgument::H).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xAD, 4, 1, std::string("XOR A,L")).load(&InstructionArgument::A).xorBytes(&InstructionArgument::L).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xAE, 8, 1, std::string("XOR A,(HL)")).load(&InstructionArgument::A).xorBytes(&InstructionArgument::_HL).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xAF, 4, 1, std::string("XOR A,A")).load(&InstructionArgument::A).xorBytes(&InstructionArgument::A).store(&InstructionArgument::A).build(),

        InstructionBuilder(0xB0, 4, 1, std::string("OR A,B")).load(&InstructionArgument::A).orBytes(&InstructionArgument::B).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xB1, 4, 1, std::string("OR A,C")).load(&InstructionArgument::A).orBytes(&InstructionArgument::C).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xB2, 4, 1, std::string("OR A,D")).load(&InstructionArgument::A).orBytes(&InstructionArgument::D).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xB3, 4, 1, std::string("OR A,E")).load(&InstructionArgument::A).orBytes(&InstructionArgument::E).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xB4, 4, 1, std::string("OR A,H")).load(&InstructionArgument::A).orBytes(&InstructionArgument::H).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xB5, 4, 1, std::string("OR A,L")).load(&InstructionArgument::A).orBytes(&InstructionArgument::L).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xB6, 8, 1, std::string("OR A,(HL)")).load(&InstructionArgument::A).orBytes(&InstructionArgument::_HL).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xB7, 4, 1, std::string("OR A,A")).load(&InstructionArgument::A).orBytes(&InstructionArgument::A).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xB8, 4, 1, std::string("CP A,B")).load(&InstructionArgument::A).compareBytes(&InstructionArgument::B).build(),
        InstructionBuilder(0xB9, 4, 1, std::string("CP A,C")).load(&InstructionArgument::A).compareBytes(&InstructionArgument::C).build(),
        InstructionBuilder(0xBA, 4, 1, std::string("CP A,D")).load(&InstructionArgument::A).compareBytes(&InstructionArgument::D).build(),
        InstructionBuilder(0xBB, 4, 1, std::string("CP A,E")).load(&InstructionArgument::A).compareBytes(&InstructionArgument::E).build(),
        InstructionBuilder(0xBC, 4, 1, std::string("CP A,H")).load(&InstructionArgument::A).compareBytes(&InstructionArgument::H).build(),
        InstructionBuilder(0xBD, 4, 1, std::string("CP A,L")).load(&InstructionArgument::A).compareBytes(&InstructionArgument::L).build(),
        InstructionBuilder(0xBE, 8, 1, std::string("CP A,(HL)")).load(&InstructionArgument::A).compareBytes(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xBF, 4, 1, std::string("CP A,A")).load(&InstructionArgument::A).compareBytes(&InstructionArgument::A).build(),

        InstructionBuilder(0xC0, 20, 1, std::string("RET NZ")).proceedIf(FlagCondition::NOT_ZERO, 8).pop().store(&InstructionArgument::PC).build(),
        InstructionBuilder(0xC1, 12, 1, std::string("POP BC")).pop().store(&InstructionArgument::BC).build(),
        InstructionBuilder(0xC2, 16, 3, std::string("JP NZ,nn")).proceedIf(FlagCondition::NOT_ZERO, 12).load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xC3, 16, 3, std::string("JP nn")).load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xC4, 24, 3, std::string("CALL NZ,nn")).proceedIf(FlagCondition::NOT_ZERO, 12).load(&InstructionArgument::PC).push().load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xC5, 16, 1, std::string("PUSH BC")).load(&InstructionArgument::BC).push().build(),
        InstructionBuilder(0xC6, 8, 2, std::string("ADD A,n")).load(&InstructionArgument::A).add(&InstructionArgument::N, AffectFlagsType::U8).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xC7, 16, 1, std::string("RST 00H")).load(&InstructionArgument::PC).push().scalar(0x00).jump().build(),
        InstructionBuilder(0xC8, 20, 1, std::string("RET Z")).proceedIf(FlagCondition::ZERO, 8).pop().store(&InstructionArgument::PC).build(),
        InstructionBuilder(0xC9, 16, 1, std::string("RET")).pop().store(&InstructionArgument::PC).build(),
        InstructionBuilder(0xCA, 16, 3, std::string("JP Z,nn")).proceedIf(FlagCondition::ZERO, 12).load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xCB, 4, 1, std::string("PREFIX CB")).build(),
        InstructionBuilder(0xCC, 24, 3, std::string("CALL Z,nn")).proceedIf(FlagCondition::ZERO, 12).load(&InstructionArgument::PC).push().load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xCD, 24, 3, std::string("CALL nn")).load(&InstructionArgument::PC).push().load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xCE, 8, 2, std::string("ADC A,n")).load(&InstructionArgument::A).addWithCarry(&InstructionArgument::N).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xCF, 16, 1, std::string("RST 08H")).load(&InstructionArgument::PC).push().scalar(0x08).jump().build(),

        InstructionBuilder(0xD0, 20, 1, std::string("RET NC")).proceedIf(FlagCondition::NOT_CARRY,8 ).pop().store(&InstructionArgument::PC).build(),
        InstructionBuilder(0xD1, 12, 1, std::string("POP DE")).pop().store(&InstructionArgument::DE).build(),
        InstructionBuilder(0xD2, 16, 3, std::string("JP NC,nn")).proceedIf(FlagCondition::NOT_CARRY, 12).load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xD3, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xD4, 24, 3, std::string("CALL NC,nn")).proceedIf(FlagCondition::NOT_CARRY, 12).load(&InstructionArgument::PC).push().load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xD5, 16, 1, std::string("PUSH DE")).load(&InstructionArgument::DE).push().build(),
        InstructionBuilder(0xD6, 8, 2, std::string("SUB A,n")).load(&InstructionArgument::A).subtract(&InstructionArgument::N).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xD7, 16, 1, std::string("RST 10H")).load(&InstructionArgument::PC).push().scalar(0x10).jump().build(),
        InstructionBuilder(0xD8, 20, 1, std::string("RET C")).proceedIf(FlagCondition::CARRY, 8).pop().store(&InstructionArgument::PC).build(),
        InstructionBuilder(0xD9, 16, 1, std::string("RETI")).pop().store(&InstructionArgument::PC).enableInterrupts(true).build(),
        InstructionBuilder(0xDA, 16, 3, std::string("JP C,nn")).proceedIf(FlagCondition::CARRY, 12).load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xDB, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xDC, 24, 3, std::string("CALL C,nn")).proceedIf(FlagCondition::CARRY, 12).load(&InstructionArgument::PC).push().load(&InstructionArgument::NN).jump().build(),
        InstructionBuilder(0xDD, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xDE, 8, 2, std::string("SBC A,n")).load(&InstructionArgument::A).subtractWithCarry(&InstructionArgument::N).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xCF, 16, 1, std::string("RST 18H")).load(&InstructionArgument::PC).push().scalar(0x18).jump().build(),

        InstructionBuilder(0xE0, 12, 2, std::string("LDH (n),A")).load(&InstructionArgument::A).store(&InstructionArgument::_N).build(),
        InstructionBuilder(0xE1, 12, 1, std::string("POP HL")).pop().store(&InstructionArgument::HL).build(),
        InstructionBuilder(0xE2, 8, 1, std::string("LD (C),A")).load(&InstructionArgument::A).store(&InstructionArgument::_C).build(),
        InstructionBuilder(0xE3, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xE4, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xE5, 16, 1, std::string("PUSH HL")).load(&InstructionArgument::HL).push().build(),
        InstructionBuilder(0xE6, 8, 2, std::string("AND A,n")).load(&InstructionArgument::A).andBytes(&InstructionArgument::N).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xE7, 16, 1, std::string("RST 20H")).load(&InstructionArgument::PC).push().scalar(0x20).jump().build(),
        InstructionBuilder(0xE8, 16, 2, std::string("ADD SP,n")).load(&InstructionArgument::SP).add(&InstructionArgument::N, AffectFlagsType::U16).setFlagZero(false).store(&InstructionArgument::SP).build(),
        InstructionBuilder(0xE9, 4, 1, std::string("JP (HL)")).load(&InstructionArgument::HL).jump().build(),
        InstructionBuilder(0xEA, 16, 3, std::string("LD (nn),A")).load(&InstructionArgument::A).store(&InstructionArgument::_NN).build(),
        InstructionBuilder(0xEB, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xEC, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xED, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xEE, 8, 2, std::string("XOR A,n")).load(&InstructionArgument::A).xorBytes(&InstructionArgument::N).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xEF, 16, 1, std::string("RST 28H")).load(&InstructionArgument::PC).push().scalar(0x28).jump().build(),

        InstructionBuilder(0xF0, 12, 2, std::string("LDH A,(n)")).load(&InstructionArgument::_N).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xF1, 12, 1, std::string("POP HL")).pop().store(&InstructionArgument::AF).build(),
        InstructionBuilder(0xF2, 8, 1, std::string("LD A,(C)")).load(&InstructionArgument::_C).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xF3, 4, 1, std::string("DI")).enableInterrupts(false).build(),
        InstructionBuilder(0xF4, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xF5, 16, 1, std::string("PUSH AF")).load(&InstructionArgument::AF).push().build(),
        InstructionBuilder(0xF6, 8, 2, std::string("OR A,n")).load(&InstructionArgument::A).orBytes(&InstructionArgument::N).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xF7, 16, 1, std::string("RST 30H")).load(&InstructionArgument::PC).push().scalar(0x30).jump().build(),
        InstructionBuilder(0xF8, 12, 2, std::string("LD HL,SP+n")).load(&InstructionArgument::SP).add(&InstructionArgument::N, AffectFlagsType::U16_S8).setFlagZero(false).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0xF9, 4, 1, std::string("LD SP,HL")).load(&InstructionArgument::SP).store(&InstructionArgument::HL).build(),
        InstructionBuilder(0xFA, 16, 3, std::string("LD A,(nn)")).load(&InstructionArgument::_NN).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xFB, 4, 1, std::string("EI")).build(), // handled in cpu because interrupt needs to be enabled AFTER the next instruction
        InstructionBuilder(0xFC, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xFD, 4, 1, std::string("Invalid Operation")).build(),
        InstructionBuilder(0xFE, 8, 2, std::string("CP A,n")).load(&InstructionArgument::A).compareBytes(&InstructionArgument::N).build(),
        InstructionBuilder(0xFF, 16, 1, std::string("RST 38H")).load(&InstructionArgument::PC).push().scalar(0x38).jump().build()
    },
    {
        InstructionBuilder(0x00, 8, 2, std::string("CB RLC B")).load(&InstructionArgument::B).rotateLeftAndCarry().store(&InstructionArgument::B).build(),
        InstructionBuilder(0x01, 8, 2, std::string("CB RLC C")).load(&InstructionArgument::C).rotateLeftAndCarry().store(&InstructionArgument::C).build(),
        InstructionBuilder(0x02, 8, 2, std::string("CB RLC D")).load(&InstructionArgument::D).rotateLeftAndCarry().store(&InstructionArgument::D).build(),
        InstructionBuilder(0x03, 8, 2, std::string("CB RLC E")).load(&InstructionArgument::E).rotateLeftAndCarry().store(&InstructionArgument::E).build(),
        InstructionBuilder(0x04, 8, 2, std::string("CB RLC H")).load(&InstructionArgument::H).rotateLeftAndCarry().store(&InstructionArgument::H).build(),
        InstructionBuilder(0x05, 8, 2, std::string("CB RLC L")).load(&InstructionArgument::L).rotateLeftAndCarry().store(&InstructionArgument::L).build(),
        InstructionBuilder(0x06, 16, 2, std::string("CB RLC (HL)")).load(&InstructionArgument::_HL).rotateLeftAndCarry().store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x07, 8, 2, std::string("CB RLC A")).load(&InstructionArgument::A).rotateLeftAndCarry().store(&InstructionArgument::A).build(),
        InstructionBuilder(0x08, 8, 2, std::string("CB RRC B")).load(&InstructionArgument::B).rotateRightAndCarry().store(&InstructionArgument::B).build(),
        InstructionBuilder(0x09, 8, 2, std::string("CB RRC C")).load(&InstructionArgument::C).rotateRightAndCarry().store(&InstructionArgument::C).build(),
        InstructionBuilder(0x0A, 8, 2, std::string("CB RRC D")).load(&InstructionArgument::D).rotateRightAndCarry().store(&InstructionArgument::D).build(),
        InstructionBuilder(0x0B, 8, 2, std::string("CB RRC E")).load(&InstructionArgument::E).rotateRightAndCarry().store(&InstructionArgument::E).build(),
        InstructionBuilder(0x0C, 8, 2, std::string("CB RRC H")).load(&InstructionArgument::H).rotateRightAndCarry().store(&InstructionArgument::H).build(),
        InstructionBuilder(0x0D, 8, 2, std::string("CB RRC L")).load(&InstructionArgument::L).rotateRightAndCarry().store(&InstructionArgument::L).build(),
        InstructionBuilder(0x0E, 16, 2, std::string("CB RRC (HL)")).load(&InstructionArgument::_HL).rotateRightAndCarry().store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x0F, 8, 2, std::string("CB RRC A")).load(&InstructionArgument::A).rotateRightAndCarry().store(&InstructionArgument::A).build(),

        InstructionBuilder(0x10, 8, 2, std::string("CB RL B")).load(&InstructionArgument::B).rotateLeft().store(&InstructionArgument::B).build(),
        InstructionBuilder(0x11, 8, 2, std::string("CB RL C")).load(&InstructionArgument::C).rotateLeft().store(&InstructionArgument::C).build(),
        InstructionBuilder(0x12, 8, 2, std::string("CB RL D")).load(&InstructionArgument::D).rotateLeft().store(&InstructionArgument::D).build(),
        InstructionBuilder(0x13, 8, 2, std::string("CB RL E")).load(&InstructionArgument::E).rotateLeft().store(&InstructionArgument::E).build(),
        InstructionBuilder(0x14, 8, 2, std::string("CB RL H")).load(&InstructionArgument::H).rotateLeft().store(&InstructionArgument::H).build(),
        InstructionBuilder(0x15, 8, 2, std::string("CB RL L")).load(&InstructionArgument::L).rotateLeft().store(&InstructionArgument::L).build(),
        InstructionBuilder(0x16, 16, 2, std::string("CB RL (HL)")).load(&InstructionArgument::_HL).rotateLeft().store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x17, 8, 2, std::string("CB RL A")).load(&InstructionArgument::A).rotateLeft().store(&InstructionArgument::A).build(),
        InstructionBuilder(0x18, 8, 2, std::string("CB RR B")).load(&InstructionArgument::B).rotateRight().store(&InstructionArgument::B).build(),
        InstructionBuilder(0x19, 8, 2, std::string("CB RR C")).load(&InstructionArgument::C).rotateRight().store(&InstructionArgument::C).build(),
        InstructionBuilder(0x1A, 8, 2, std::string("CB RR D")).load(&InstructionArgument::D).rotateRight().store(&InstructionArgument::D).build(),
        InstructionBuilder(0x1B, 8, 2, std::string("CB RR E")).load(&InstructionArgument::E).rotateRight().store(&InstructionArgument::E).build(),
        InstructionBuilder(0x1C, 8, 2, std::string("CB RR H")).load(&InstructionArgument::H).rotateRight().store(&InstructionArgument::H).build(),
        InstructionBuilder(0x1D, 8, 2, std::string("CB RR L")).load(&InstructionArgument::L).rotateRight().store(&InstructionArgument::L).build(),
        InstructionBuilder(0x1E, 16, 2, std::string("CB RR (HL)")).load(&InstructionArgument::_HL).rotateRight().store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x1F, 8, 2, std::string("CB RR A")).load(&InstructionArgument::A).rotateRight().store(&InstructionArgument::A).build(),

        InstructionBuilder(0x20, 8, 2, std::string("CB SLA B")).load(&InstructionArgument::B).shiftLeftArithmetic().store(&InstructionArgument::B).build(),
        InstructionBuilder(0x21, 8, 2, std::string("CB SLA C")).load(&InstructionArgument::C).shiftLeftArithmetic().store(&InstructionArgument::C).build(),
        InstructionBuilder(0x22, 8, 2, std::string("CB SLA D")).load(&InstructionArgument::D).shiftLeftArithmetic().store(&InstructionArgument::D).build(),
        InstructionBuilder(0x23, 8, 2, std::string("CB SLA E")).load(&InstructionArgument::E).shiftLeftArithmetic().store(&InstructionArgument::E).build(),
        InstructionBuilder(0x24, 8, 2, std::string("CB SLA H")).load(&InstructionArgument::H).shiftLeftArithmetic().store(&InstructionArgument::H).build(),
        InstructionBuilder(0x25, 8, 2, std::string("CB SLA L")).load(&InstructionArgument::L).shiftLeftArithmetic().store(&InstructionArgument::L).build(),
        InstructionBuilder(0x26, 16, 2, std::string("CB SLA (HL)")).load(&InstructionArgument::_HL).shiftLeftArithmetic().store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x27, 8, 2, std::string("CB SLA A")).load(&InstructionArgument::A).shiftLeftArithmetic().store(&InstructionArgument::A).build(),
        InstructionBuilder(0x28, 8, 2, std::string("CB SRA B")).load(&InstructionArgument::B).shiftRightArithmetic().store(&InstructionArgument::B).build(),
        InstructionBuilder(0x29, 8, 2, std::string("CB SRA C")).load(&InstructionArgument::C).shiftRightArithmetic().store(&InstructionArgument::C).build(),
        InstructionBuilder(0x2A, 8, 2, std::string("CB SRA D")).load(&InstructionArgument::D).shiftRightArithmetic().store(&InstructionArgument::D).build(),
        InstructionBuilder(0x2B, 8, 2, std::string("CB SRA E")).load(&InstructionArgument::E).shiftRightArithmetic().store(&InstructionArgument::E).build(),
        InstructionBuilder(0x2C, 8, 2, std::string("CB SRA H")).load(&InstructionArgument::H).shiftRightArithmetic().store(&InstructionArgument::H).build(),
        InstructionBuilder(0x2D, 8, 2, std::string("CB SRA L")).load(&InstructionArgument::L).shiftRightArithmetic().store(&InstructionArgument::L).build(),
        InstructionBuilder(0x2E, 16, 2, std::string("CB SRA (HL)")).load(&InstructionArgument::_HL).shiftRightArithmetic().store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x2F, 8, 2, std::string("CB SRA A")).load(&InstructionArgument::A).shiftRightArithmetic().store(&InstructionArgument::A).build(),

        InstructionBuilder(0x30, 8, 2, std::string("CB SWAP B")).load(&InstructionArgument::B).swapNibbles().store(&InstructionArgument::B).build(),
        InstructionBuilder(0x31, 8, 2, std::string("CB SWAP C")).load(&InstructionArgument::C).swapNibbles().store(&InstructionArgument::C).build(),
        InstructionBuilder(0x32, 8, 2, std::string("CB SWAP D")).load(&InstructionArgument::D).swapNibbles().store(&InstructionArgument::D).build(),
        InstructionBuilder(0x33, 8, 2, std::string("CB SWAP E")).load(&InstructionArgument::E).swapNibbles().store(&InstructionArgument::E).build(),
        InstructionBuilder(0x34, 8, 2, std::string("CB SWAP H")).load(&InstructionArgument::H).swapNibbles().store(&InstructionArgument::H).build(),
        InstructionBuilder(0x35, 8, 2, std::string("CB SWAP L")).load(&InstructionArgument::L).swapNibbles().store(&InstructionArgument::L).build(),
        InstructionBuilder(0x36, 16, 2, std::string("CB SWAP (HL)")).load(&InstructionArgument::_HL).swapNibbles().store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x37, 8, 2, std::string("CB SWAP A")).load(&InstructionArgument::A).swapNibbles().store(&InstructionArgument::A).build(),
        InstructionBuilder(0x38, 8, 2, std::string("CB SRL B")).load(&InstructionArgument::B).shiftRightLogical().store(&InstructionArgument::B).build(),
        InstructionBuilder(0x39, 8, 2, std::string("CB SRL C")).load(&InstructionArgument::C).shiftRightLogical().store(&InstructionArgument::C).build(),
        InstructionBuilder(0x3A, 8, 2, std::string("CB SRL D")).load(&InstructionArgument::D).shiftRightLogical().store(&InstructionArgument::D).build(),
        InstructionBuilder(0x3B, 8, 2, std::string("CB SRL E")).load(&InstructionArgument::E).shiftRightLogical().store(&InstructionArgument::E).build(),
        InstructionBuilder(0x3C, 8, 2, std::string("CB SRL H")).load(&InstructionArgument::H).shiftRightLogical().store(&InstructionArgument::H).build(),
        InstructionBuilder(0x3D, 8, 2, std::string("CB SRL L")).load(&InstructionArgument::L).shiftRightLogical().store(&InstructionArgument::L).build(),
        InstructionBuilder(0x3E, 16, 2, std::string("CB SRL (HL)")).load(&InstructionArgument::_HL).shiftRightLogical().store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x3F, 8, 2, std::string("CB SRL A")).load(&InstructionArgument::A).shiftRightLogical().store(&InstructionArgument::A).build(),

        InstructionBuilder(0x40, 8, 2, std::string("CB BIT 0,B")).load(&InstructionArgument::B).testBit(0).build(),
        InstructionBuilder(0x41, 8, 2, std::string("CB BIT 0,C")).load(&InstructionArgument::C).testBit(0).build(),
        InstructionBuilder(0x42, 8, 2, std::string("CB BIT 0,D")).load(&InstructionArgument::D).testBit(0).build(),
        InstructionBuilder(0x43, 8, 2, std::string("CB BIT 0,E")).load(&InstructionArgument::E).testBit(0).build(),
        InstructionBuilder(0x44, 8, 2, std::string("CB BIT 0,H")).load(&InstructionArgument::H).testBit(0).build(),
        InstructionBuilder(0x45, 8, 2, std::string("CB BIT 0,L")).load(&InstructionArgument::L).testBit(0).build(),
        InstructionBuilder(0x46, 16, 2, std::string("CB BIT 0,(HL)")).load(&InstructionArgument::B).testBit(0).build(),
        InstructionBuilder(0x47, 8, 2, std::string("CB BIT 0,A")).load(&InstructionArgument::A).testBit(0).build(),
        InstructionBuilder(0x48, 8, 2, std::string("CB BIT 1,B")).load(&InstructionArgument::B).testBit(1).build(),
        InstructionBuilder(0x49, 8, 2, std::string("CB BIT 1,C")).load(&InstructionArgument::C).testBit(1).build(),
        InstructionBuilder(0x4A, 8, 2, std::string("CB BIT 1,D")).load(&InstructionArgument::D).testBit(1).build(),
        InstructionBuilder(0x4B, 8, 2, std::string("CB BIT 1,E")).load(&InstructionArgument::E).testBit(1).build(),
        InstructionBuilder(0x4C, 8, 2, std::string("CB BIT 1,H")).load(&InstructionArgument::H).testBit(1).build(),
        InstructionBuilder(0x4D, 8, 2, std::string("CB BIT 1,L")).load(&InstructionArgument::L).testBit(1).build(),
        InstructionBuilder(0x4E, 16, 2, std::string("CB BIT 1,(HL)")).load(&InstructionArgument::B).testBit(1).build(),
        InstructionBuilder(0x4F, 8, 2, std::string("CB BIT 1,A")).load(&InstructionArgument::A).testBit(1).build(),

        InstructionBuilder(0x50, 8, 2, std::string("CB BIT 2,B")).load(&InstructionArgument::B).testBit(2).build(),
        InstructionBuilder(0x51, 8, 2, std::string("CB BIT 2,C")).load(&InstructionArgument::C).testBit(2).build(),
        InstructionBuilder(0x52, 8, 2, std::string("CB BIT 2,D")).load(&InstructionArgument::D).testBit(2).build(),
        InstructionBuilder(0x53, 8, 2, std::string("CB BIT 2,E")).load(&InstructionArgument::E).testBit(2).build(),
        InstructionBuilder(0x54, 8, 2, std::string("CB BIT 2,H")).load(&InstructionArgument::H).testBit(2).build(),
        InstructionBuilder(0x55, 8, 2, std::string("CB BIT 2,L")).load(&InstructionArgument::L).testBit(2).build(),
        InstructionBuilder(0x56, 16, 2, std::string("CB BIT 2,(HL)")).load(&InstructionArgument::B).testBit(2).build(),
        InstructionBuilder(0x57, 8, 2, std::string("CB BIT 2,A")).load(&InstructionArgument::A).testBit(2).build(),
        InstructionBuilder(0x58, 8, 2, std::string("CB BIT 3,B")).load(&InstructionArgument::B).testBit(3).build(),
        InstructionBuilder(0x59, 8, 2, std::string("CB BIT 3,C")).load(&InstructionArgument::C).testBit(3).build(),
        InstructionBuilder(0x5A, 8, 2, std::string("CB BIT 3,D")).load(&InstructionArgument::D).testBit(3).build(),
        InstructionBuilder(0x5B, 8, 2, std::string("CB BIT 3,E")).load(&InstructionArgument::E).testBit(3).build(),
        InstructionBuilder(0x5C, 8, 2, std::string("CB BIT 3,H")).load(&InstructionArgument::H).testBit(3).build(),
        InstructionBuilder(0x5D, 8, 2, std::string("CB BIT 3,L")).load(&InstructionArgument::L).testBit(3).build(),
        InstructionBuilder(0x5E, 16, 2, std::string("CB BIT 3,(HL)")).load(&InstructionArgument::B).testBit(3).build(),
        InstructionBuilder(0x5F, 8, 2, std::string("CB BIT 3,A")).load(&InstructionArgument::A).testBit(3).build(),

        InstructionBuilder(0x60, 8, 2, std::string("CB BIT 4,B")).load(&InstructionArgument::B).testBit(4).build(),
        InstructionBuilder(0x61, 8, 2, std::string("CB BIT 4,C")).load(&InstructionArgument::C).testBit(4).build(),
        InstructionBuilder(0x62, 8, 2, std::string("CB BIT 4,D")).load(&InstructionArgument::D).testBit(4).build(),
        InstructionBuilder(0x63, 8, 2, std::string("CB BIT 4,E")).load(&InstructionArgument::E).testBit(4).build(),
        InstructionBuilder(0x64, 8, 2, std::string("CB BIT 4,H")).load(&InstructionArgument::H).testBit(4).build(),
        InstructionBuilder(0x65, 8, 2, std::string("CB BIT 4,L")).load(&InstructionArgument::L).testBit(4).build(),
        InstructionBuilder(0x66, 16, 2, std::string("CB BIT 4,(HL)")).load(&InstructionArgument::B).testBit(4).build(),
        InstructionBuilder(0x67, 8, 2, std::string("CB BIT 4,A")).load(&InstructionArgument::A).testBit(4).build(),
        InstructionBuilder(0x68, 8, 2, std::string("CB BIT 5,B")).load(&InstructionArgument::B).testBit(5).build(),
        InstructionBuilder(0x69, 8, 2, std::string("CB BIT 5,C")).load(&InstructionArgument::C).testBit(5).build(),
        InstructionBuilder(0x6A, 8, 2, std::string("CB BIT 5,D")).load(&InstructionArgument::D).testBit(5).build(),
        InstructionBuilder(0x6B, 8, 2, std::string("CB BIT 5,E")).load(&InstructionArgument::E).testBit(5).build(),
        InstructionBuilder(0x6C, 8, 2, std::string("CB BIT 5,H")).load(&InstructionArgument::H).testBit(5).build(),
        InstructionBuilder(0x6D, 8, 2, std::string("CB BIT 5,L")).load(&InstructionArgument::L).testBit(5).build(),
        InstructionBuilder(0x6E, 16, 2, std::string("CB BIT 5,(HL)")).load(&InstructionArgument::B).testBit(5).build(),
        InstructionBuilder(0x6F, 8, 2, std::string("CB BIT 5,A")).load(&InstructionArgument::A).testBit(5).build(),

        InstructionBuilder(0x70, 8, 2, std::string("CB BIT 6,B")).load(&InstructionArgument::B).testBit(6).build(),
        InstructionBuilder(0x71, 8, 2, std::string("CB BIT 6,C")).load(&InstructionArgument::C).testBit(6).build(),
        InstructionBuilder(0x72, 8, 2, std::string("CB BIT 6,D")).load(&InstructionArgument::D).testBit(6).build(),
        InstructionBuilder(0x73, 8, 2, std::string("CB BIT 6,E")).load(&InstructionArgument::E).testBit(6).build(),
        InstructionBuilder(0x74, 8, 2, std::string("CB BIT 6,H")).load(&InstructionArgument::H).testBit(6).build(),
        InstructionBuilder(0x75, 8, 2, std::string("CB BIT 6,L")).load(&InstructionArgument::L).testBit(6).build(),
        InstructionBuilder(0x76, 16, 2, std::string("CB BIT 6,(HL)")).load(&InstructionArgument::B).testBit(6).build(),
        InstructionBuilder(0x77, 8, 2, std::string("CB BIT 6,A")).load(&InstructionArgument::A).testBit(6).build(),
        InstructionBuilder(0x78, 8, 2, std::string("CB BIT 7,B")).load(&InstructionArgument::B).testBit(7).build(),
        InstructionBuilder(0x79, 8, 2, std::string("CB BIT 7,C")).load(&InstructionArgument::C).testBit(7).build(),
        InstructionBuilder(0x7A, 8, 2, std::string("CB BIT 7,D")).load(&InstructionArgument::D).testBit(7).build(),
        InstructionBuilder(0x7B, 8, 2, std::string("CB BIT 7,E")).load(&InstructionArgument::E).testBit(7).build(),
        InstructionBuilder(0x7C, 8, 2, std::string("CB BIT 7,H")).load(&InstructionArgument::H).testBit(7).build(),
        InstructionBuilder(0x7D, 8, 2, std::string("CB BIT 7,L")).load(&InstructionArgument::L).testBit(7).build(),
        InstructionBuilder(0x7E, 16, 2, std::string("CB BIT 7,(HL)")).load(&InstructionArgument::B).testBit(7).build(),
        InstructionBuilder(0x7F, 8, 2, std::string("CB BIT 7,A")).load(&InstructionArgument::A).testBit(7).build(),

        InstructionBuilder(0x80, 8, 2, std::string("CB RES 0,B")).load(&InstructionArgument::B).resetBit(0).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x81, 8, 2, std::string("CB RES 0,C")).load(&InstructionArgument::C).resetBit(0).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x82, 8, 2, std::string("CB RES 0,D")).load(&InstructionArgument::D).resetBit(0).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x83, 8, 2, std::string("CB RES 0,E")).load(&InstructionArgument::E).resetBit(0).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x84, 8, 2, std::string("CB RES 0,H")).load(&InstructionArgument::H).resetBit(0).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x85, 8, 2, std::string("CB RES 0,L")).load(&InstructionArgument::L).resetBit(0).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x86, 16, 2, std::string("CB RES 0,(HL)")).load(&InstructionArgument::_HL).resetBit(0).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x87, 8, 2, std::string("CB RES 0,A")).load(&InstructionArgument::A).resetBit(0).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x88, 8, 2, std::string("CB RES 1,B")).load(&InstructionArgument::B).resetBit(1).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x89, 8, 2, std::string("CB RES 1,C")).load(&InstructionArgument::C).resetBit(1).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x8A, 8, 2, std::string("CB RES 1,D")).load(&InstructionArgument::D).resetBit(1).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x8B, 8, 2, std::string("CB RES 1,E")).load(&InstructionArgument::E).resetBit(1).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x8C, 8, 2, std::string("CB RES 1,H")).load(&InstructionArgument::H).resetBit(1).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x8D, 8, 2, std::string("CB RES 1,L")).load(&InstructionArgument::L).resetBit(1).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x8E, 16, 2, std::string("CB RES 1,(HL)")).load(&InstructionArgument::_HL).resetBit(1).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x8F, 8, 2, std::string("CB RES 1,A")).load(&InstructionArgument::A).resetBit(1).store(&InstructionArgument::A).build(),

        InstructionBuilder(0x90, 8, 2, std::string("CB RES 2,B")).load(&InstructionArgument::B).resetBit(2).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x91, 8, 2, std::string("CB RES 2,C")).load(&InstructionArgument::C).resetBit(2).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x92, 8, 2, std::string("CB RES 2,D")).load(&InstructionArgument::D).resetBit(2).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x93, 8, 2, std::string("CB RES 2,E")).load(&InstructionArgument::E).resetBit(2).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x94, 8, 2, std::string("CB RES 2,H")).load(&InstructionArgument::H).resetBit(2).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x95, 8, 2, std::string("CB RES 2,L")).load(&InstructionArgument::L).resetBit(2).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x96, 16, 2, std::string("CB RES 2,(HL)")).load(&InstructionArgument::_HL).resetBit(2).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x97, 8, 2, std::string("CB RES 2,A")).load(&InstructionArgument::A).resetBit(2).store(&InstructionArgument::A).build(),
        InstructionBuilder(0x98, 8, 2, std::string("CB RES 3,B")).load(&InstructionArgument::B).resetBit(3).store(&InstructionArgument::B).build(),
        InstructionBuilder(0x99, 8, 2, std::string("CB RES 3,C")).load(&InstructionArgument::C).resetBit(3).store(&InstructionArgument::C).build(),
        InstructionBuilder(0x9A, 8, 2, std::string("CB RES 3,D")).load(&InstructionArgument::D).resetBit(3).store(&InstructionArgument::D).build(),
        InstructionBuilder(0x9B, 8, 2, std::string("CB RES 3,E")).load(&InstructionArgument::E).resetBit(3).store(&InstructionArgument::E).build(),
        InstructionBuilder(0x9C, 8, 2, std::string("CB RES 3,H")).load(&InstructionArgument::H).resetBit(3).store(&InstructionArgument::H).build(),
        InstructionBuilder(0x9D, 8, 2, std::string("CB RES 3,L")).load(&InstructionArgument::L).resetBit(3).store(&InstructionArgument::L).build(),
        InstructionBuilder(0x9E, 16, 2, std::string("CB RES 3,(HL)")).load(&InstructionArgument::_HL).resetBit(3).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0x9F, 8, 2, std::string("CB RES 3,A")).load(&InstructionArgument::A).resetBit(3).store(&InstructionArgument::A).build(),

        InstructionBuilder(0xA0, 8, 2, std::string("CB RES 4,B")).load(&InstructionArgument::B).resetBit(4).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xA1, 8, 2, std::string("CB RES 4,C")).load(&InstructionArgument::C).resetBit(4).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xA2, 8, 2, std::string("CB RES 4,D")).load(&InstructionArgument::D).resetBit(4).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xA3, 8, 2, std::string("CB RES 4,E")).load(&InstructionArgument::E).resetBit(4).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xA4, 8, 2, std::string("CB RES 4,H")).load(&InstructionArgument::H).resetBit(4).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xA5, 8, 2, std::string("CB RES 4,L")).load(&InstructionArgument::L).resetBit(4).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xA6, 16, 2, std::string("CB RES 4,(HL)")).load(&InstructionArgument::_HL).resetBit(4).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xA7, 8, 2, std::string("CB RES 4,A")).load(&InstructionArgument::A).resetBit(4).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xA8, 8, 2, std::string("CB RES 5,B")).load(&InstructionArgument::B).resetBit(5).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xA9, 8, 2, std::string("CB RES 5,C")).load(&InstructionArgument::C).resetBit(5).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xAA, 8, 2, std::string("CB RES 5,D")).load(&InstructionArgument::D).resetBit(5).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xAB, 8, 2, std::string("CB RES 5,E")).load(&InstructionArgument::E).resetBit(5).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xAC, 8, 2, std::string("CB RES 5,H")).load(&InstructionArgument::H).resetBit(5).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xAD, 8, 2, std::string("CB RES 5,L")).load(&InstructionArgument::L).resetBit(5).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xAE, 16, 2, std::string("CB RES 5,(HL)")).load(&InstructionArgument::_HL).resetBit(5).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xAF, 8, 2, std::string("CB RES 5,A")).load(&InstructionArgument::A).resetBit(5).store(&InstructionArgument::A).build(),

        InstructionBuilder(0xB0, 8, 2, std::string("CB RES 6,B")).load(&InstructionArgument::B).resetBit(6).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xB1, 8, 2, std::string("CB RES 6,C")).load(&InstructionArgument::C).resetBit(6).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xB2, 8, 2, std::string("CB RES 6,D")).load(&InstructionArgument::D).resetBit(6).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xB3, 8, 2, std::string("CB RES 6,E")).load(&InstructionArgument::E).resetBit(6).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xB4, 8, 2, std::string("CB RES 6,H")).load(&InstructionArgument::H).resetBit(6).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xB5, 8, 2, std::string("CB RES 6,L")).load(&InstructionArgument::L).resetBit(6).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xB6, 16, 2, std::string("CB RES 6,(HL)")).load(&InstructionArgument::_HL).resetBit(6).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xB7, 8, 2, std::string("CB RES 6,A")).load(&InstructionArgument::A).resetBit(6).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xB8, 8, 2, std::string("CB RES 7,B")).load(&InstructionArgument::B).resetBit(7).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xB9, 8, 2, std::string("CB RES 7,C")).load(&InstructionArgument::C).resetBit(7).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xBA, 8, 2, std::string("CB RES 7,D")).load(&InstructionArgument::D).resetBit(7).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xBB, 8, 2, std::string("CB RES 7,E")).load(&InstructionArgument::E).resetBit(7).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xBC, 8, 2, std::string("CB RES 7,H")).load(&InstructionArgument::H).resetBit(7).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xBD, 8, 2, std::string("CB RES 7,L")).load(&InstructionArgument::L).resetBit(7).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xBE, 16, 2, std::string("CB RES 7,(HL)")).load(&InstructionArgument::_HL).resetBit(7).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xBF, 8, 2, std::string("CB RES 7,A")).load(&InstructionArgument::A).resetBit(7).store(&InstructionArgument::A).build(),

        InstructionBuilder(0xC0, 8, 2, std::string("CB SET 0,B")).load(&InstructionArgument::B).setBit(0).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xC1, 8, 2, std::string("CB SET 0,C")).load(&InstructionArgument::C).setBit(0).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xC2, 8, 2, std::string("CB SET 0,D")).load(&InstructionArgument::D).setBit(0).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xC3, 8, 2, std::string("CB SET 0,E")).load(&InstructionArgument::E).setBit(0).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xC4, 8, 2, std::string("CB SET 0,H")).load(&InstructionArgument::H).setBit(0).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xC5, 8, 2, std::string("CB SET 0,L")).load(&InstructionArgument::L).setBit(0).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xC6, 16, 2, std::string("CB SET 0,(HL)")).load(&InstructionArgument::_HL).setBit(0).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xC7, 8, 2, std::string("CB SET 0,A")).load(&InstructionArgument::A).setBit(0).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xC8, 8, 2, std::string("CB SET 1,B")).load(&InstructionArgument::B).setBit(1).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xC9, 8, 2, std::string("CB SET 1,C")).load(&InstructionArgument::C).setBit(1).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xCA, 8, 2, std::string("CB SET 1,D")).load(&InstructionArgument::D).setBit(1).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xCB, 8, 2, std::string("CB SET 1,E")).load(&InstructionArgument::E).setBit(1).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xCC, 8, 2, std::string("CB SET 1,H")).load(&InstructionArgument::H).setBit(1).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xCD, 8, 2, std::string("CB SET 1,L")).load(&InstructionArgument::L).setBit(1).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xCE, 16, 2, std::string("CB SET 1,(HL)")).load(&InstructionArgument::_HL).setBit(1).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xCF, 8, 2, std::string("CB SET 1,A")).load(&InstructionArgument::A).setBit(1).store(&InstructionArgument::A).build(),

        InstructionBuilder(0xD0, 8, 2, std::string("CB SET 2,B")).load(&InstructionArgument::B).setBit(2).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xD1, 8, 2, std::string("CB SET 2,C")).load(&InstructionArgument::C).setBit(2).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xD2, 8, 2, std::string("CB SET 2,D")).load(&InstructionArgument::D).setBit(2).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xD3, 8, 2, std::string("CB SET 2,E")).load(&InstructionArgument::E).setBit(2).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xD4, 8, 2, std::string("CB SET 2,H")).load(&InstructionArgument::H).setBit(2).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xD5, 8, 2, std::string("CB SET 2,L")).load(&InstructionArgument::L).setBit(2).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xD6, 16, 2, std::string("CB SET 2,(HL)")).load(&InstructionArgument::_HL).setBit(2).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xD7, 8, 2, std::string("CB SET 2,A")).load(&InstructionArgument::A).setBit(2).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xD8, 8, 2, std::string("CB SET 3,B")).load(&InstructionArgument::B).setBit(3).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xD9, 8, 2, std::string("CB SET 3,C")).load(&InstructionArgument::C).setBit(3).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xDA, 8, 2, std::string("CB SET 3,D")).load(&InstructionArgument::D).setBit(3).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xDB, 8, 2, std::string("CB SET 3,E")).load(&InstructionArgument::E).setBit(3).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xDC, 8, 2, std::string("CB SET 3,H")).load(&InstructionArgument::H).setBit(3).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xDD, 8, 2, std::string("CB SET 3,L")).load(&InstructionArgument::L).setBit(3).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xDE, 16, 2, std::string("CB SET 3,(HL)")).load(&InstructionArgument::_HL).setBit(3).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xDF, 8, 2, std::string("CB SET 3,A")).load(&InstructionArgument::A).setBit(3).store(&InstructionArgument::A).build(),

        InstructionBuilder(0xE0, 8, 2, std::string("CB SET 4,B")).load(&InstructionArgument::B).setBit(4).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xE1, 8, 2, std::string("CB SET 4,C")).load(&InstructionArgument::C).setBit(4).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xE2, 8, 2, std::string("CB SET 4,D")).load(&InstructionArgument::D).setBit(4).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xE3, 8, 2, std::string("CB SET 4,E")).load(&InstructionArgument::E).setBit(4).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xE4, 8, 2, std::string("CB SET 4,H")).load(&InstructionArgument::H).setBit(4).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xE5, 8, 2, std::string("CB SET 4,L")).load(&InstructionArgument::L).setBit(4).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xE6, 16, 2, std::string("CB SET 4,(HL)")).load(&InstructionArgument::_HL).setBit(4).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xE7, 8, 2, std::string("CB SET 4,A")).load(&InstructionArgument::A).setBit(4).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xE8, 8, 2, std::string("CB SET 5,B")).load(&InstructionArgument::B).setBit(5).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xE9, 8, 2, std::string("CB SET 5,C")).load(&InstructionArgument::C).setBit(5).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xEA, 8, 2, std::string("CB SET 5,D")).load(&InstructionArgument::D).setBit(5).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xEB, 8, 2, std::string("CB SET 5,E")).load(&InstructionArgument::E).setBit(5).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xEC, 8, 2, std::string("CB SET 5,H")).load(&InstructionArgument::H).setBit(5).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xED, 8, 2, std::string("CB SET 5,L")).load(&InstructionArgument::L).setBit(5).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xEE, 16, 2, std::string("CB SET 5,(HL)")).load(&InstructionArgument::_HL).setBit(5).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xEF, 8, 2, std::string("CB SET 5,A")).load(&InstructionArgument::A).setBit(5).store(&InstructionArgument::A).build(),

        InstructionBuilder(0xF0, 8, 2, std::string("CB SET 6,B")).load(&InstructionArgument::B).setBit(6).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xF1, 8, 2, std::string("CB SET 6,C")).load(&InstructionArgument::C).setBit(6).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xF2, 8, 2, std::string("CB SET 6,D")).load(&InstructionArgument::D).setBit(6).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xF3, 8, 2, std::string("CB SET 6,E")).load(&InstructionArgument::E).setBit(6).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xF4, 8, 2, std::string("CB SET 6,H")).load(&InstructionArgument::H).setBit(6).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xF5, 8, 2, std::string("CB SET 6,L")).load(&InstructionArgument::L).setBit(6).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xF6, 16, 2, std::string("CB SET 6,(HL)")).load(&InstructionArgument::_HL).setBit(6).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xF7, 8, 2, std::string("CB SET 6,A")).load(&InstructionArgument::A).setBit(6).store(&InstructionArgument::A).build(),
        InstructionBuilder(0xF8, 8, 2, std::string("CB SET 7,B")).load(&InstructionArgument::B).setBit(7).store(&InstructionArgument::B).build(),
        InstructionBuilder(0xF9, 8, 2, std::string("CB SET 7,C")).load(&InstructionArgument::C).setBit(7).store(&InstructionArgument::C).build(),
        InstructionBuilder(0xFA, 8, 2, std::string("CB SET 7,D")).load(&InstructionArgument::D).setBit(7).store(&InstructionArgument::D).build(),
        InstructionBuilder(0xFB, 8, 2, std::string("CB SET 7,E")).load(&InstructionArgument::E).setBit(7).store(&InstructionArgument::E).build(),
        InstructionBuilder(0xFC, 8, 2, std::string("CB SET 7,H")).load(&InstructionArgument::H).setBit(7).store(&InstructionArgument::H).build(),
        InstructionBuilder(0xFD, 8, 2, std::string("CB SET 7,L")).load(&InstructionArgument::L).setBit(7).store(&InstructionArgument::L).build(),
        InstructionBuilder(0xFE, 16, 2, std::string("CB SET 7,(HL)")).load(&InstructionArgument::_HL).setBit(7).store(&InstructionArgument::_HL).build(),
        InstructionBuilder(0xFF, 8, 2, std::string("CB SET 7,A")).load(&InstructionArgument::A).setBit(7).store(&InstructionArgument::A).build()
    }
};

// https://gbdev.gg8.se/wiki/articles/Interrupts
// Interrupt Service Routine
// According to Z80 datasheets, the following occurs when control is being transferred to an interrupt handler:
//
// 1. Two wait states are executed (2 machine cycles pass while nothing occurs, presumably the CPU is executing NOPs during this time).
// 2. The current PC is pushed onto the stack, this process consumes 2 more machine cycles.
// 3. The high byte of the PC is set to 0, the low byte is set to the address of the handler ($40,$48,$50,$58,$60). This consumes one last machine cycle.
// The entire ISR should consume a total of 5 machine cycles. This has yet to be tested, but is what the Z80 datasheet implies.
Instruction* interrupts[] = {
    InstructionBuilder(0x40, 20, 0, std::string("VBLANK")).load(&InstructionArgument::PC).push().scalar(VBLANK_INTERRUPT_HANDLER).store(&InstructionArgument::PC).jump().build(),
    InstructionBuilder(0x48, 20, 0, std::string("LCD")).load(&InstructionArgument::PC).push().scalar(LCD_INTERRUPT_HANDLER).store(&InstructionArgument::PC).jump().build(),
    InstructionBuilder(0x50, 20, 0, std::string("TIMER")).load(&InstructionArgument::PC).push().scalar(TIMER_INTERRUPT_HANDLER).store(&InstructionArgument::PC).jump().build(),
    InstructionBuilder(0x58, 20, 0, std::string("SERIAL")).load(&InstructionArgument::PC).push().scalar(SERIAL_INTERRUPT_HANDLER).store(&InstructionArgument::PC).jump().build(),
    InstructionBuilder(0x60, 20, 0, std::string("INPUT")).load(&InstructionArgument::PC).push().scalar(INPUT_INTERRUPT_HANDLER).store(&InstructionArgument::PC).jump().build(),
};

}
