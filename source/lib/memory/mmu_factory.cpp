#include "lib/memory/mmu_factory.hpp"

// Initial values come from the Gambatte source code
// https://github.com/sinamas/gambatte/blob/master/libgambatte/src/initstate.cpp

namespace gb_lib {

MMU* MMUFactory::create(uint8_t* rom, uint32_t romSize, DMAMediator* dmaMediator, DMAMediator* hdmaMediator, bool isCGB)
{
    MemorySpace* cartridge = this->cartridgeFactory.create(rom, romSize);
    MemorySpace* highRam = this->createHighRam(isCGB);
    MemorySpace* ioRegisters = this->createIORegisters(dmaMediator, hdmaMediator, isCGB);
    MemorySpace* oam = new OAM(ioRegisters);

    MemorySpace* unusedMemoryFEA0_FEFF = nullptr;
    MemorySpace* videoRam = nullptr;
    MemorySpace* workingRam = nullptr;

    if (isCGB)
    {
        unusedMemoryFEA0_FEFF = new CGBUnusedMemoryFEA0_FEFF();
        videoRam = new CGBVideoRam(ioRegisters);
        workingRam = new CGBWorkingRam(ioRegisters);
    }
    else
    {
        unusedMemoryFEA0_FEFF = new UnusedMemoryFEA0_FEFF();
        videoRam = new VideoRam(ioRegisters);
        workingRam = new WorkingRam();
    }

    return new MMU(cartridge, highRam, ioRegisters, oam, unusedMemoryFEA0_FEFF, videoRam, workingRam);
}

MemorySpace* MMUFactory::createHighRam(bool isCGB)
{
    MemorySpace* highRam = new HighRam();

    if (isCGB)
    {
        uint8_t initialValues[0x80] = {
            0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
          	0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
          	0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
            0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
            0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
            0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
            0x45, 0xEC, 0x42, 0xFA, 0x08, 0xB7, 0x07, 0x5D,
            0x01, 0xF5, 0xC0, 0xFF, 0x08, 0xFC, 0x00, 0xE5,
            0x0B, 0xF8, 0xC2, 0xCA, 0xF4, 0xF9, 0x0D, 0x7F,
            0x44, 0x6D, 0x19, 0xFE, 0x46, 0x97, 0x33, 0x5E,
            0x08, 0xFF, 0xD1, 0xFF, 0xC6, 0x8B, 0x24, 0x74,
            0x12, 0xFC, 0x00, 0x9F, 0x94, 0xB7, 0x06, 0xD5,
            0x40, 0x7A, 0x20, 0x9E, 0x04, 0x5F, 0x41, 0x2F,
            0x3D, 0x77, 0x36, 0x75, 0x81, 0x8A, 0x70, 0x3A,
            0x98, 0xD1, 0x71, 0x02, 0x4D, 0x01, 0xC1, 0xFF,
            0x0D, 0x00, 0xD3, 0x05, 0xF9, 0x00, 0x0B, 0x00
        };

        for (uint16_t i = 0; i < 0x80; i++)
        {
            highRam->setByte(0xFF80 + i, initialValues[i]);
        }
    }
    else
    {
        uint8_t initialValues[0x80] = {
            0x2B, 0x0B, 0x64, 0x2F, 0xAF, 0x15, 0x60, 0x6D,
            0x61, 0x4E, 0xAC, 0x45, 0x0F, 0xDA, 0x92, 0xF3,
            0x83, 0x38, 0xE4, 0x4E, 0xA7, 0x6C, 0x38, 0x58,
      	  	0xBE, 0xEA, 0xE5, 0x81, 0xB4, 0xCB, 0xBF, 0x7B,
      		  0x59, 0xAD, 0x50, 0x13, 0x5E, 0xF6, 0xB3, 0xC1,
      	  	0xDC, 0xDF, 0x9E, 0x68, 0xD7, 0x59, 0x26, 0xF3,
            0x62, 0x54, 0xF8, 0x36, 0xB7, 0x78, 0x6A, 0x22,
            0xA7, 0xDD, 0x88, 0x15, 0xCA, 0x96, 0x39, 0xD3,
            0xE6, 0x55, 0x6E, 0xEA, 0x90, 0x76, 0xB8, 0xFF,
            0x50, 0xCD, 0xB5, 0x1B, 0x1F, 0xA5, 0x4D, 0x2E,
            0xB4, 0x09, 0x47, 0x8A, 0xC4, 0x5A, 0x8C, 0x4E,
            0xE7, 0x29, 0x50, 0x88, 0xA8, 0x66, 0x85, 0x4B,
            0xAA, 0x38, 0xE7, 0x6B, 0x45, 0x3E, 0x30, 0x37,
            0xBA, 0xC5, 0x31, 0xF2, 0x71, 0xB4, 0xCF, 0x29,
            0xBC, 0x7F, 0x7E, 0xD0, 0xC7, 0xC3, 0xBD, 0xCF,
            0x59, 0xEA, 0x39, 0x01, 0x2E, 0x00, 0x69, 0x00
        };

        for (uint16_t i = 0; i < 0x80; i++)
        {
            highRam->setByte(0xFF80 + i, initialValues[i]);
        }
    }
    return highRam;
}

MemorySpace* MMUFactory::createIORegisters(DMAMediator* dmaMediator, DMAMediator* hdmaMediator, bool isCGB)
{
    MemorySpace* ioRegisters = new IORegisters(dmaMediator, hdmaMediator, isCGB);

    if (isCGB)
    {
        uint8_t initialValues[0x80] = {
            0xCF, 0x00, 0x7C, 0xFF, 0x44, 0x00, 0x00, 0xF8,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
            0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00,
            0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
            0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
            0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
            0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x7E, 0xFF, 0xFE,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xC0, 0xFF, 0xC1, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,
            0xF8, 0xFF, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
        };

        for (uint16_t i = 0; i < 0x80; i++)
        {
            ioRegisters->setByte(0xFF00 + i, initialValues[i]);
        }
    }
    else
    {
        uint8_t initialValues[0x80] = {
           0xCF, 0x00, 0x7E, 0xFF, 0xD3, 0x00, 0x00, 0xF8,
           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
           0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00,
           0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
           0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF,
           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
           0x71, 0x72, 0xD5, 0x91, 0x58, 0xBB, 0x2A, 0xFA,
           0xCF, 0x3C, 0x54, 0x75, 0x48, 0xCF, 0x8F, 0xD9,
           0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFC,
           0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
           0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
        };

        for (uint16_t i = 0; i < 0x80; i++)
        {
            ioRegisters->setByte(0xFF00 + i, initialValues[i]);
        }
    }

    return ioRegisters;
}

}
