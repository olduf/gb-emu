#include "lib/memory/io_registers.hpp"

namespace gb_lib {

IORegisters::IORegisters(DMAMediator* dmaMediator, bool isCGB)
{
    this->dmaMediator = dmaMediator;

    if (isCGB)
    {
        uint8_t cgbInitialValues[0x80] = {
            0xCF, 0x00, 0x7C, 0xFF, 0x44, 0x00, 0x00, 0xF8,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
            0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00,
            0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
            0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
            0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
            0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x7E, 0xFF, 0xFE,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xC0, 0xFF, 0xC1, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,
            0xF8, 0xFF, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
        };

        for (int i = 0; 1 < 0x80; i++)
        {
            this->registers[i] = cgbInitialValues[i];
        }
    }
}

uint8_t IORegisters::getByte(uint16_t address)
{
    return this->registers[address & 0x00FF];
}

// TODO - implement correct write-reset behavior
void IORegisters::setByte(uint16_t address, uint8_t value)
{
    this->registers[address & 0x00FF] = value;

    if (address == DMA)
    {
        this->dmaMediator->requestTransfer(value);
    }
}

void IORegisters::setByteInternal(uint16_t address, uint8_t value)
{
    this->registers[address & 0x00FF] = value;
}

}
